using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class InputManager : MonoBehaviour
{
    // there should be only one inputManager  in scene !
    private static InputManager instance;
    public static InputManager Instance { get { return instance; } } // will not overwrite this instance 

    // Action Schemes 

    private RunnerInputAction actionScheme; // class generated by the input system ( check box in asset if doesn't work )

    // Configuration 
    [SerializeField] private float sqrSwipeDeadzone = 50.0f;
    //will allow access from other scripts (only to get value ! thats why we use "{ get { return PrivateVarName; } }" 
    #region public properties 
    public bool Tap
    {
        get
        {
            //tapCount++;
            return tap;
        }
    }
    public Vector2 TouchPosition { get { return touchPosition; } } // allows to get instances of the value

    public bool SwipeLeft { get { return swipeLeft; } }
    public bool SwipeRight { get { return swipeRight; } }
    public bool SwipeUp { get { return swipeUp; } }
    public bool SwipeDown { get { return swipeDown; } }
    #endregion

    #region privates
    //private int tapCount = 0;
    private bool tap;
    private Vector2 touchPosition;
    private Vector2 startDrag;
    private bool swipeLeft;
    private bool swipeRight;
    private bool swipeUp;
    private bool swipeDown;
    #endregion
    private void Awake()
    {
        instance = this;
        DontDestroyOnLoad(gameObject);
        SetupControl();

    }
    private void LateUpdate()
    {
        ResetInputs();
    }
    private void ResetInputs()
    {
        tap = swipeLeft = swipeRight = swipeUp = swipeDown = false;

    }
    private void SetupControl()
    {
        actionScheme = new RunnerInputAction();

        // register different actions - setup the events we defined earlier in the input system window on unity

        actionScheme.Gameplay.Tap.performed += ctx => OnTap(ctx); // use visual studio to create function . right click and use 'quick actions and refactoring + enter!
        actionScheme.Gameplay.TouchPosition.performed += ctx => OnPosition(ctx);
        actionScheme.Gameplay.StartDrag.performed += ctx => OnStartDrag(ctx);
        actionScheme.Gameplay.EndDrag.performed += ctx => OnEndDrag(ctx);

    }

    private void OnEndDrag(UnityEngine.InputSystem.InputAction.CallbackContext ctx)
    {
        Vector2 delta = touchPosition - startDrag;  // current position (end drag) - start position // gets the position relative to the drag start
        float sqrDistance = delta.sqrMagnitude; // returns square length of the vector length

        // Confimed swipe
        if (sqrDistance > sqrSwipeDeadzone) // checks if squared length is long enough to be considered a swipe
        {
            float x = Math.Abs(delta.x); // returns absolute value ( in case value is negative ) v
            float y = Math.Abs(delta.y);

            if (x > y) // Left or Right Swipe
            {
                if (delta.x > 0) // Right swipe (>0)
                    swipeRight = true;
                else
                    swipeLeft = true;
            }
            else // Up or Down
            {
                if (delta.y > 0)
                    swipeUp = true;
                else
                    swipeDown = true;
            }
        }
        startDrag = Vector2.zero;
    }

    private void OnStartDrag(UnityEngine.InputSystem.InputAction.CallbackContext ctx)
    {
        startDrag = touchPosition; // sets starting drag position
    }

    private void OnPosition(UnityEngine.InputSystem.InputAction.CallbackContext ctx)
    {
        touchPosition = ctx.ReadValue<Vector2>(); // gets the position of the touch
    }

    private void OnTap(UnityEngine.InputSystem.InputAction.CallbackContext ctx)
    {
        tap = true;
    }

    public void OnEnable()
    {
        actionScheme.Enable();
    }
    public void OnDisable()
    {
        actionScheme.Disable();

    }
}
// for this to work properly go to unity --> edit --> project settings -> script execution order ->  + (add) InputManager
// -> move it below "UnityEngine.InputSystem.PlayerInput - > click "apply" ///// yay 
/*
 * DYNAMIC UPDATE ( order ) 
 * InputManager processes the inputs 
 * PlayerMotor uses inputs to move
 * 
 * LATE UPDATE 
 * InputManager resets these inputs 
 * */